/*
 * OpenID Attacker
 * (C) 2015 Christian Mainka & Christian Ko√ümann
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package wsattacker.sso.openid.attacker.gui.server;

import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.Converter;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;
import wsattacker.sso.openid.attacker.controller.ServerController;
import wsattacker.sso.openid.attacker.log.RequestType;
import wsattacker.sso.openid.attacker.server.IdpType;
import wsattacker.sso.openid.attacker.server.exception.OpenIdAttackerServerException;
import wsattacker.sso.openid.attacker.server.status.Status;

public class ServerConfigurationGui extends javax.swing.JPanel {

    /**
     * Creates new form ServerConfigurationGui
     */
    public ServerConfigurationGui() {
        initComponents();

        associationTable.setDefaultRenderer(Date.class, new DateRenderer());
        logTable.setDefaultRenderer(Date.class, new DateRenderer());
        logTable.setDefaultRenderer(RequestType.class, new TypeRenderer());
    }

    public void setIdp(IdpType idp) {
        controller.setIdp(idp);

        performAttackCheckbox.setEnabled(false);
        performAttackLabel.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                bindingGroup = new BindingGroup();

                controller = new ServerController();
                startButtonColorConverter = new StartButtonColorConverter();
                portLabel = new JLabel();
                associationPrefixLabel = new JLabel();
                associationPrefixValue = new JTextField();
                expirationLabel = new JLabel();
                interceptLabel = new JLabel();
                performAttackLabel = new JLabel();
                hostnameText = new JTextField();
                portText = new JTextField();
                expirationText = new JTextField();
                interceptCheckbox = new JCheckBox();
                performAttackCheckbox = new JCheckBox();
                statusLabel = new JLabel();
                statusValue = new JLabel();
                startButton = new JButton();
                stopButton = new JButton();
                title = new JLabel();
                associationScrollPane1 = new JScrollPane();
                associationTable = new JTable();
                logScrollPane = new JScrollPane();
                logTable = new JTable();
                jCheckBox2 = new JCheckBox();

                setName("Server Configuration"); // NOI18N

                portLabel.setText("Server Listen Host/Port:");

                associationPrefixLabel.setText("Association Prefix:");

                Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.associationPrefix}"), associationPrefixValue, BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                expirationLabel.setText("Association Expiration Time:");

                interceptLabel.setText("Intercept IdP Response:");

                performAttackLabel.setText("Perform Attack:");

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.serverListenHost}"), hostnameText, BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.serverListenPort}"), portText, BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.associationExpirationInSeconds}"), expirationText, BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.interceptIdPResponse}"), interceptCheckbox, BeanProperty.create("selected"));
                bindingGroup.addBinding(binding);

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.performAttack}"), performAttackCheckbox, BeanProperty.create("selected"));
                bindingGroup.addBinding(binding);

                statusLabel.setText("Server Status:");

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ, controller, ELProperty.create("${server.serverStatusline}"), statusValue, BeanProperty.create("text"));
                bindingGroup.addBinding(binding);

                startButton.setText("Start");

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ, controller, ELProperty.create("${server.status}"), startButton, BeanProperty.create("background"), "startButtonColor");
                binding.setConverter(startButtonColorConverter);
                bindingGroup.addBinding(binding);
                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${server.status}"), startButton, BeanProperty.create("enabled"), "");
                binding.setConverter(new Converter<Status, Boolean>() {
                        @Override
                        public Boolean convertForward(Status value) {
                                return Status.STOPPED.equals(value);
                        }

                        @Override
                        public Status convertReverse(Boolean value) {
                                throw new UnsupportedOperationException("Read only!");
                        }
                });
                bindingGroup.addBinding(binding);

                startButton.addActionListener(new ActionListener() {
                        @Override
						public void actionPerformed(ActionEvent evt) {
                                startButtonActionPerformed(evt);
                        }
                });

                stopButton.setText("Stop");

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${server.status}"), stopButton, BeanProperty.create("enabled"));
                binding.setConverter(new Converter<Status, Boolean>() {
                        @Override
                        public Boolean convertForward(Status value) {
                                return Status.RUNNING.equals(value);
                        }

                        @Override
                        public Status convertReverse(Boolean value) {
                                throw new UnsupportedOperationException("Read only!");
                        }
                });
                bindingGroup.addBinding(binding);

                stopButton.addActionListener(new ActionListener() {
                        @Override
						public void actionPerformed(ActionEvent evt) {
                                stopButtonActionPerformed(evt);
                        }
                });

                title.setFont(new Font("Dialog", 1, 24)); // NOI18N
                title.setText("Server Overview");

                ELProperty eLProperty = ELProperty.create("${server.store.associationList}");
                JTableBinding jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ, controller, eLProperty, associationTable, "associationTable");
                JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${handle}"));
                columnBinding.setColumnName("Handle");
                columnBinding.setColumnClass(String.class);
                columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${expiry}"));
                columnBinding.setColumnName("Expiry");
                columnBinding.setColumnClass(Date.class);
                columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${type}"));
                columnBinding.setColumnName("Type");
                columnBinding.setColumnClass(String.class);
                bindingGroup.addBinding(jTableBinding);
                jTableBinding.bind();

                associationScrollPane1.setViewportView(associationTable);

                logTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                eLProperty = ELProperty.create("${requestLog}");
                jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ, controller, eLProperty, logTable, "log");
                columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${type}"));
                columnBinding.setColumnName("Type");
                columnBinding.setColumnClass(RequestType.class);
                columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${date}"));
                columnBinding.setColumnName("Date");
                columnBinding.setColumnClass(Date.class);
                columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${text}"));
                columnBinding.setColumnName("Text");
                columnBinding.setColumnClass(String.class);
                bindingGroup.addBinding(jTableBinding);
                jTableBinding.bind();
                logScrollPane.setViewportView(logTable);

                jCheckBox2.setText("GET");

                binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, controller, ELProperty.create("${config.methodGet}"), jCheckBox2, BeanProperty.create("selected"));
                bindingGroup.addBinding(binding);

                GroupLayout layout = new GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(logScrollPane, GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(statusLabel)
                                                        .addComponent(performAttackLabel)
                                                        .addComponent(portLabel)
                                                        .addComponent(associationPrefixLabel)
                                                        .addComponent(expirationLabel)
                                                        .addComponent(interceptLabel))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(expirationText)
                                                        .addComponent(associationPrefixValue)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(startButton)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(stopButton)
                                                                .addGap(0, 504, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(statusValue, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(performAttackCheckbox))
                                                                .addGap(210, 210, 210))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(interceptCheckbox)
                                                                .addGap(63, 63, 63)
                                                                .addComponent(jCheckBox2)
                                                                .addGap(4, 513, Short.MAX_VALUE))
                                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(hostnameText)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(portText, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(title)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(associationScrollPane1, GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE))
                                .addContainerGap())
                );

                layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {startButton, stopButton});

                layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(title)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(portLabel)
                                        .addComponent(portText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hostnameText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(associationPrefixLabel)
                                        .addComponent(associationPrefixValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(expirationLabel)
                                        .addComponent(expirationText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(interceptLabel, GroupLayout.Alignment.TRAILING)
                                                        .addComponent(interceptCheckbox))
                                                .addGap(7, 7, 7)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(performAttackCheckbox)
                                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(performAttackLabel)
                                                                .addGap(3, 3, 3)))
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(statusLabel)
                                                        .addComponent(statusValue, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(startButton)
                                                        .addComponent(stopButton))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(associationScrollPane1, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(logScrollPane, GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jCheckBox2)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(0, 0, 0))
                );

                getAccessibleContext().setAccessibleName("Server Configuration");

                bindingGroup.bind();
        }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try {
            controller.getServer().start();
        } catch (OpenIdAttackerServerException ex) {
            Logger.getLogger(ServerConfigurationGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        try {
            controller.getServer().stop();
        } catch (OpenIdAttackerServerException ex) {
            Logger.getLogger(ServerConfigurationGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stopButtonActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private JLabel associationPrefixLabel;
        private JTextField associationPrefixValue;
        private JScrollPane associationScrollPane1;
        private JTable associationTable;
        private ServerController controller;
        private JLabel expirationLabel;
        private JTextField expirationText;
        private JTextField hostnameText;
        private JCheckBox interceptCheckbox;
        private JLabel interceptLabel;
        private JCheckBox jCheckBox2;
        private JScrollPane logScrollPane;
        private JTable logTable;
        private JCheckBox performAttackCheckbox;
        private JLabel performAttackLabel;
        private JLabel portLabel;
        private JTextField portText;
        private JButton startButton;
        private StartButtonColorConverter startButtonColorConverter;
        private JLabel statusLabel;
        private JLabel statusValue;
        private JButton stopButton;
        private JLabel title;
        private BindingGroup bindingGroup;
        // End of variables declaration//GEN-END:variables
}
