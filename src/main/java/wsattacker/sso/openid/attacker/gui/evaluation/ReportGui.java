/*
 * OpenID Attacker
 * (C) 2015 Christian Mainka & Christian Ko√ümann
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package wsattacker.sso.openid.attacker.gui.evaluation;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import wsattacker.sso.openid.attacker.evaluation.EvaluationResult;
import wsattacker.sso.openid.attacker.evaluation.EvaluationResultStore;
import wsattacker.sso.openid.attacker.evaluation.attack.AttackResult;
import wsattacker.sso.openid.attacker.evaluation.report.HtmlOutput;

public class ReportGui extends javax.swing.JPanel {
    
    private boolean includeTraining = false;

    /**
     * Creates new form ReportGui
     */
    public ReportGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        controller = new wsattacker.sso.openid.attacker.controller.ServerController();
        generateReportButton = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        saveResultsButton = new javax.swing.JButton();
        loadResultsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        evaluationResultsTable = new javax.swing.JTable();
        removeReportButton = new javax.swing.JButton();
        includeTrainingCheckBox = new javax.swing.JCheckBox();

        generateReportButton.setText("Generate Report");
        generateReportButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportButtonActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        title.setText("Reports");

        saveResultsButton.setText("Save Results");
        saveResultsButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultsButtonActionPerformed(evt);
            }
        });

        loadResultsButton.setText("Load Results");
        loadResultsButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadResultsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${evaluationResults}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, eLProperty, evaluationResultsTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${url}"));
        columnBinding.setColumnName("URL");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${formattedDate}"));
        columnBinding.setColumnName("Date");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(evaluationResultsTable);

        removeReportButton.setText("Remove Report");
        removeReportButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeReportButtonActionPerformed(evt);
            }
        });

        includeTrainingCheckBox.setText("Include Training");
        includeTrainingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeTrainingCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(includeTrainingCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateReportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeReportButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveResultsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadResultsButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateReportButton)
                    .addComponent(removeReportButton)
                    .addComponent(includeTrainingCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveResultsButton)
                    .addComponent(loadResultsButton)))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void generateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportButtonActionPerformed
        int selectedRow = evaluationResultsTable.getSelectedRow();
        
        // nothing selected?
        if (selectedRow == -1) {
            return;
        }
        
        EvaluationResult evaluationResult = controller.getEvaluationResults().get(selectedRow);
        
        HtmlOutput htmlOutput = HtmlOutput.getHtmlOutput();
        htmlOutput.startHtml();
        String date = evaluationResult.getFormattedDate();
        htmlOutput.addUrl(evaluationResult.getUrl() + " (" + date + ")");
        
        htmlOutput.addSummary(evaluationResult);
        
        if (evaluationResult.getTrainingResults() != null && includeTraining) {
            htmlOutput.addTrainingResults(evaluationResult.getTrainingResults());
        }
        
        Map<String, List<AttackResult>> mapOfAttackResult = evaluationResult.getMapOfAttackResult();
        for (Map.Entry<String, List<AttackResult>> entry : mapOfAttackResult.entrySet()) {
            htmlOutput.addAttackResults(entry.getKey(), entry.getValue());
        }
        
        htmlOutput.openReportInDefaultBrowser();
    }//GEN-LAST:event_generateReportButtonActionPerformed

    private void saveResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultsButtonActionPerformed
        try {
            List<EvaluationResult> evaluationResults = new ArrayList<>(EvaluationResultStore.getEvaluationResultStore().getEvaluationResults());
            
            //for (int i = 0; i < evaluationResults.size(); i++) {
                OutputStream fos = Files.newOutputStream(Paths.get("evaluation_results.ser"));
                ObjectOutputStream oos = new ObjectOutputStream(fos);            
                oos.writeObject(evaluationResults);
                oos.close();
            //}
            
            
        } catch (IOException e) {
            
        }
        
        JOptionPane.showMessageDialog(null, "Data was saved successfully.");
    }//GEN-LAST:event_saveResultsButtonActionPerformed

    private void loadResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadResultsButtonActionPerformed
        try {
            InputStream fis = Files.newInputStream(Paths.get("evaluation_results.ser"));
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            
            
            List<EvaluationResult> evaluationResults = (List<EvaluationResult>) ois.readObject();
            
            for (EvaluationResult result: evaluationResults) {
                EvaluationResultStore.getEvaluationResultStore().addEvaluationResult(result);
            }
            
        } catch (IOException | ClassNotFoundException e) {
            
        }
        
        JOptionPane.showMessageDialog(null, "Data was loaded successfully.");
    }//GEN-LAST:event_loadResultsButtonActionPerformed

    private void removeReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeReportButtonActionPerformed
        int selectedRow = evaluationResultsTable.getSelectedRow();
        
        EvaluationResultStore.getEvaluationResultStore().getEvaluationResults().remove(selectedRow);
    }//GEN-LAST:event_removeReportButtonActionPerformed

    private void includeTrainingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeTrainingCheckBoxActionPerformed
        includeTraining = !includeTraining;
    }//GEN-LAST:event_includeTrainingCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private wsattacker.sso.openid.attacker.controller.ServerController controller;
    private javax.swing.JTable evaluationResultsTable;
    private javax.swing.JButton generateReportButton;
    private javax.swing.JCheckBox includeTrainingCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadResultsButton;
    private javax.swing.JButton removeReportButton;
    private javax.swing.JButton saveResultsButton;
    private javax.swing.JLabel title;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
