/*
 * OpenID Attacker
 * (C) 2015 Christian Mainka & Christian Ko√ümann
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package wsattacker.sso.openid.attacker.gui.attack;

import java.awt.Component;
import java.awt.Dimension;
import java.util.List;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import org.jdesktop.observablecollections.ObservableList;
import org.jdesktop.observablecollections.ObservableListListener;
import wsattacker.sso.openid.attacker.attack.parameter.AttackParameter;
import wsattacker.sso.openid.attacker.attack.parameter.AttackParameterKeeper;
import wsattacker.sso.openid.attacker.server.IdpType;

public class AttackOverviewGui extends javax.swing.JPanel implements ObservableListListener {

    /**
     * Creates new form AttackOverviewGui
     * @param idpType
     */
    public AttackOverviewGui(final IdpType idpType) {
        initComponents();
        
        controller.setIdp(idpType);
        
        if (idpType.equals(IdpType.ANALYZER)) {
            performAttack.setEnabled(false);
            sendTokenToAttackerUrl.setEnabled(false);
        }
        
        // set speed for scrolling
        parameterScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        
        AttackParameterKeeper keeper = controller.getServer().getParameterConfiguration();
        ObservableList<AttackParameter> list = (ObservableList<AttackParameter>) keeper.getParameterList();
        list.addObservableListListener(this);
        newParameterName.setInputVerifier(new InputVerifier() {
            final private AttackParameterKeeper parameters = controller.getServer().getParameterConfiguration();

            @Override
            public boolean verify(JComponent jc) {
                String newName = newParameterName.getText();
                boolean contained = parameters.hasParameter(newName);
                if (contained) {
                    errorLabel.setText(String.format("Parameter '%s' already exist", newName));
                } else {
                    errorLabel.setText("");
                }
                return !contained;
            }
        });
    }
    
    public void setIdp(IdpType idp) {
        controller.setIdp(idp);
    }

    @Override
    public void listElementsAdded(ObservableList list, int index, int length) {
        List<AttackParameter> addedParameters = list;
        int last = index + length;
        for (int i = index; i < last; ++i) {
            AttackParameter parameter = addedParameters.get(i);
            addParameterToPanel(parameter, index);
        }

    }

    @Override
    public void listElementsRemoved(ObservableList list, int index, List oldElements) {
        List<AttackParameter> removedParameters = oldElements;
        for (AttackParameter removed : removedParameters) {
            AbstractAttackParameterGui gui = (AbstractAttackParameterGui) parameterPanel.getComponent(index);
            gui.doUnbind();
            parameterPanel.remove(index);
        }
    }

    @Override
    public void listElementReplaced(ObservableList list, int index, Object oldElement) {
        AttackParameter newParameter = (AttackParameter) list.get(index);
        AbstractAttackParameterGui gui = (AbstractAttackParameterGui) parameterPanel.getComponent(index);
        gui.doUnbind();
        parameterPanel.remove(index);
        addParameterToPanel(newParameter, index);
    }

    @Override
    public void listElementPropertyChanged(ObservableList list, int index) {
    }

    private void adjustingOptionPanelSize() {
        int width = parameterScrollPane.getSize().width - 20;
        for (int i = 0; i < parameterPanel.getComponentCount(); ++i) {
            Component c = parameterPanel.getComponent(i);
            int height = c.getPreferredSize().height;
            c.setPreferredSize(new Dimension(width, height));
        }
        parameterPanel.setSize(parameterPanel.getPreferredSize());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        controller = new wsattacker.sso.openid.attacker.controller.ServerController();
        title = new javax.swing.JLabel();
        performAttack = new javax.swing.JCheckBox();
        interceptToken = new javax.swing.JCheckBox();
        parameterScrollPane = new javax.swing.JScrollPane();
        parameterPanel = new javax.swing.JPanel();
        newParameterTitle = new javax.swing.JLabel();
        newParameterName = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        seperator = new javax.swing.JSeparator();
        sendTokenToAttackerUrl = new javax.swing.JCheckBox();

        title.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        title.setText("Attack Overview");

        performAttack.setText("Perform Attack");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.performAttack}"), performAttack, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        performAttack.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                performAttackStateChanged(evt);
            }
        });

        interceptToken.setText("Intercept Token");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.interceptIdPResponse}"), interceptToken, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        parameterPanel.setLayout(new java.awt.GridLayout(0, 1));
        parameterScrollPane.setViewportView(parameterPanel);

        newParameterTitle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        newParameterTitle.setText("New Parameter");

        removeButton.setText("Clear");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        sendTokenToAttackerUrl.setText("Send Token to attacker URL");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, controller, org.jdesktop.beansbinding.ELProperty.create("${config.sendTokenToAttackUrl}"), sendTokenToAttackerUrl, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seperator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(performAttack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(interceptToken)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendTokenToAttackerUrl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 13, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(130, 130, 130)
                                        .addComponent(newParameterName))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newParameterTitle)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton)))
                        .addGap(6, 6, 6))
                    .addComponent(parameterScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, removeButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(performAttack)
                        .addComponent(interceptToken)
                        .addComponent(sendTokenToAttackerUrl))
                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newParameterTitle)
                    .addComponent(newParameterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parameterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            controller.getServer().addParameter(newParameterName.getText());
        } catch (IllegalArgumentException e) {
            errorLabel.setText(e.getMessage());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        try {
            controller.getServer().clearParameters();
            parameterPanel.revalidate();
            parameterPanel.repaint();
        } catch (IllegalArgumentException e) {
            errorLabel.setText(e.getMessage());
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void performAttackStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_performAttackStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_performAttackStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private wsattacker.sso.openid.attacker.controller.ServerController controller;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JCheckBox interceptToken;
    private javax.swing.JTextField newParameterName;
    private javax.swing.JLabel newParameterTitle;
    private javax.swing.JPanel parameterPanel;
    private javax.swing.JScrollPane parameterScrollPane;
    private javax.swing.JCheckBox performAttack;
    private javax.swing.JButton removeButton;
    private javax.swing.JCheckBox sendTokenToAttackerUrl;
    private javax.swing.JSeparator seperator;
    private javax.swing.JLabel title;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void addParameterToPanel(AttackParameter newParameter, int index) {
        AbstractAttackParameterGui gui;
        gui = AttackParameterGuiFactory.createGui(newParameter);
        parameterPanel.add(gui, index);
//        gui.setAlignmentX(Component.LEFT_ALIGNMENT);
//        gui.setAlignmentY(Component.TOP_ALIGNMENT);
    }

//    public void setIdp(IdpType idp) {
//        controller.setIdp(idp);
//    }
}
